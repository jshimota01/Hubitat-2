/**
*   
*	File: Twilio_Notifications.groovy
*	Platform: Hubitat
*   Modification History:
*       Date       Who            		What
*		2018-05-03 Michael Ritchie  	Initial Release
*
*  Copyright 2018 Michael Ritchie
*
*  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License. You may obtain a copy of the License at:
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
*  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
*  for the specific language governing permissions an limitations under the License.
*
*
*/
def version() {"v1.0.20180503"}

metadata {
  	definition (name: "Twilio", namespace: "mlritchie", author: "Michael Ritchie") {
    	capability "Notification"
  	}
}

preferences {
    input("accountSID", "text", title: "Twilio Account SID:", description: "Twilio Account SID")
  	input("authToken", "text", title: "Twilio Auth Token:", description: "Twilio Auth Token")
    if (getValidated()) {
  		input("toNumber", "text", title: "Phone Number:", description: "Phone number to send SMS to.", required: true)
		input("fromNumber", "enum", title: "Twilio Phone Number:", description: "Twilio phone number to use.", options: getValidated("phoneList"), required: true)
    }
	input("isDebugEnabled", "bool", title: "Enable debug logging?", defaultValue: false, required: false)
}

def installed() {
    initialize()
}

def updated() {
 	initialize()
}

def initialize() {
    state.version = version()
}

def getValidated(type) {
	def validated = false
	
	if (type == "phoneList") {
		logDebug "Generating Twilio phone number list..."
	} else {
		logDebug "Validating API Credentials..."
	}
    
    def params = [
    	uri: "https://" + accountSID + ":" + authToken + "@api.twilio.com/2010-04-01/Accounts/" + accountSID + "/IncomingPhoneNumbers.json?PageSize=500"
  	]
    
    if ((accountSID =~ /[A-Za-z0-9]{30}/) && (authToken =~ /[A-Za-z0-9]{30}/)) {
        try {
        	httpGet(params){response ->
      			if (response.status != 200) {
        			log.error "Received HTTP error ${response.status}. Check your API Credentials!"
      			} else {
                    if (type=="phoneList") {
                        logDebug "Phone list generated"
                        phoneList = response.data.incoming_phone_numbers.phone_number
                    } else {
                        logDebug "API credentials validated"
                        validated = true
                    }
      			}
    		}
        } catch (Exception e) {
        	log.error "Invalid API Credentials were probably entered. Twilio Server Returned: ${e}"
		} 
    } else {
    	log.error "Account SID '${accountSID}' or Auth Token '${authToken}' is not properly formatted!"
  	}
	
    if (type == "phoneList") {
		return phoneList
	} else {
		return validated
	}    
}

def deviceNotification(message) {
  	def postBody = [
    	To: "$toNumber",
    	From: "$fromNumber",
   		Body: "${message}"
  	]

  	def params = [
		uri: "https://" + accountSID + ":" + authToken + "@api.twilio.com/2010-04-01/Accounts/" + accountSID + "/Messages.json",
    	body: postBody
  	]

    if ((accountSID =~ /[A-Za-z0-9]{30}/) && (authToken =~ /[A-Za-z0-9]{30}/)) {
    	httpPost(params){response ->
      		if (response.status != 201) {
        		log.error "Received HTTP error ${response.status}. Check your API Credentials!"
      		} else {
        		logDebug "Message Received by Twilio: ${message}"
      		}
    	}
  	} else {
    	log.error "Account SID '${accountSID}' or Auth Token '${authToken}' is not properly formatted!"
  	}
}

private logDebug(msg) {
	if (isDebugEnabled) {
		log.debug "$msg"
	}
}
